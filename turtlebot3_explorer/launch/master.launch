<launch>
    <!-- Configuration -->
    <arg name="world_name" default="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/>
    <arg name="model" default="burger"/>
    
    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>
    
    <!-- Robot 1 -->
    <group ns="robot1">
        <!-- Load robot description with namespace prefix -->
        <param name="robot_description" 
               command="$(find xacro)/xacro $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
        
        <!-- Spawn Robot -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
              args="-urdf -model turtlebot3_robot1 -x -2.0 -y 0.0 -z 0.0 -param robot_description" />
        
        <!-- Robot State Publisher -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <remap from="/tf" to="tf"/>
            <remap from="/tf_static" to="tf_static"/>
        </node>
        
        <!-- Manual namespace transforms-->
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_base_link" 
              args="0 0 0.010 0 0 0 robot1/base_footprint robot1/base_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_wheel_left" 
              args="0 0.08 0 0 0 0 robot1/base_link robot1/wheel_left_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_wheel_right" 
              args="0 -0.08 0 0 0 0 robot1/base_link robot1/wheel_right_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_caster" 
              args="-0.064 0 -0.007 0 0 0 robot1/base_link robot1/caster_back_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_imu" 
              args="-0.032 0 0.068 0 0 0 robot1/base_link robot1/imu_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_scan" 
              args="-0.064 0 0.122 0 0 0 robot1/base_link robot1/base_scan" />
        
        <!-- SLAM -->
        <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
            <remap from="scan" to="scan"/>
            <remap from="map" to="map"/>
            <param name="base_frame" value="robot1/base_footprint"/>
            <param name="odom_frame" value="robot1/odom"/>
            <param name="map_frame" value="robot1/map"/>
            <param name="map_update_interval" value="1.0"/>
            <param name="maxUrange" value="3.0"/>
            <param name="maxRange" value="3.5"/>
            <param name="sigma" value="0.05"/>
            <param name="kernelSize" value="1"/>
            <param name="lstep" value="0.05"/>
            <param name="astep" value="0.05"/>
            <param name="iterations" value="5"/>
            <param name="lsigma" value="0.075"/>
            <param name="ogain" value="3.0"/>
            <param name="minimumScore" value="50"/>
            <param name="linearUpdate" value="0.1"/>
            <param name="angularUpdate" value="0.1"/>
            <param name="temporalUpdate" value="-1.0"/>
            <param name="particles" value="30"/>
            <param name="xmin" value="-10.0"/>
            <param name="ymin" value="-10.0"/>
            <param name="xmax" value="10.0"/>
            <param name="ymax" value="10.0"/>
            <param name="delta" value="0.05"/>
            <param name="transform_publish_period" value="0.05"/>
        </node>
    </group>
    
    <!-- Robot 2 -->
    <group ns="robot2">
        <!-- Load robot description -->
        <param name="robot_description" 
               command="$(find xacro)/xacro $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
        
        <!-- Spawn Robot -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
              args="-urdf -model turtlebot3_robot2 -x -2.0 -y 1.0 -z 0.0 -param robot_description" />
        
        <!-- Robot State Publisher -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <remap from="/tf" to="tf"/>
            <remap from="/tf_static" to="tf_static"/>
        </node>
        
        <!-- Manual namespace transforms -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_base_link" 
              args="0 0 0.010 0 0 0 robot2/base_footprint robot2/base_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_wheel_left" 
              args="0 0.08 0 0 0 0 robot2/base_link robot2/wheel_left_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_wheel_right" 
              args="0 -0.08 0 0 0 0 robot2/base_link robot2/wheel_right_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_caster" 
              args="-0.064 0 -0.007 0 0 0 robot2/base_link robot2/caster_back_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_imu" 
              args="-0.032 0 0.068 0 0 0 robot2/base_link robot2/imu_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_scan" 
              args="-0.064 0 0.122 0 0 0 robot2/base_link robot2/base_scan" />
        
        <!-- SLAM -->
        <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
            <remap from="scan" to="scan"/>
            <remap from="map" to="map"/>
            <param name="base_frame" value="robot2/base_footprint"/>
            <param name="odom_frame" value="robot2/odom"/>
            <param name="map_frame" value="robot2/map"/>
            <param name="map_update_interval" value="1.0"/>
            <param name="maxUrange" value="3.0"/>
            <param name="maxRange" value="3.5"/>
            <param name="sigma" value="0.05"/>
            <param name="kernelSize" value="1"/>
            <param name="lstep" value="0.05"/>
            <param name="astep" value="0.05"/>
            <param name="iterations" value="5"/>
            <param name="lsigma" value="0.075"/>
            <param name="ogain" value="3.0"/>
            <param name="minimumScore" value="50"/>
            <param name="linearUpdate" value="0.1"/>
            <param name="angularUpdate" value="0.1"/>
            <param name="temporalUpdate" value="-1.0"/>
            <param name="particles" value="30"/>
            <param name="xmin" value="-10.0"/>
            <param name="ymin" value="-10.0"/>
            <param name="xmax" value="10.0"/>
            <param name="ymax" value="10.0"/>
            <param name="delta" value="0.05"/>
            <param name="transform_publish_period" value="0.05"/>
        </node>
    </group>
    
    <!-- Global map frame setup-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_robot1_map" 
          args="0.0 0.0 0.0 0 0 0 map robot1/map" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_robot2_map" 
          args="0.0 0.0 0.0 0 0 0 map robot2/map" />
    
    <!-- Map Merger -->
    <node name="map_merger" pkg="turtlebot3_explorer" type="map_merger.py" output="screen" 
          launch-prefix="bash -c 'sleep 10; $0 $@' ">
        <rosparam param="robot_namespaces">[robot1, robot2]</rosparam>
        <param name="merged_map_topic" value="/map"/>
        <param name="world_frame" value="map"/>
        <param name="merge_rate" value="2.0"/>
    </node>
    
    <!-- Frontier Detection -->
    <node name="frontier_detector" pkg="turtlebot3_explorer" type="frontier_detector" output="screen">
        <param name="map_topic" value="/map"/>
        <param name="frontier_topic" value="/frontiers"/>
        <param name="frontier_points_topic" value="/frontier_points"/>
        <param name="min_frontier_size" value="10"/>
    </node>
    
    <!-- Multi-Robot Controller -->
    <node name="multi_robot_controller" pkg="turtlebot3_explorer" type="multi_robot_controller.py" output="screen">
        <rosparam param="robot_namespaces">[robot1, robot2]</rosparam>
        <param name="rescuer_namespace" value=""/>
        <param name="teleport_step_size" value="0.5"/>
        <param name="goal_tolerance" value="0.3"/>
    </node>
    
    <!-- RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot3_explorer)/rviz/config.rviz"/>
    
    <!-- Automatic initialization -->
    <node name="slam_initializer" pkg="turtlebot3_explorer" type="initialize_slam.py" 
          output="screen" launch-prefix="bash -c 'sleep 15; $0 $@' "/>
    
    <!-- Start in exploration mode -->
    <node name="exploration_mode_setter" pkg="rostopic" type="rostopic" 
          args="pub -l /control_mode std_msgs/String 'explore'" />
    
</launch>