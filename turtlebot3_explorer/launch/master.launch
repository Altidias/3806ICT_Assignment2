<launch>
    <!-- config params -->
    <env name="ROSCONSOLE_CONFIG_FILE" value="$(find turtlebot3_explorer)/config/rosconsole.config"/>
    <arg name="world_name" default="$(find turtlebot3_explorer)/worlds/tunnel_maze.world"/>
    <arg name="model" default="burger"/>
    <arg name="num_robots" default="2"/>
    <arg name="use_rviz" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="use_survivors" default="true"/>
    
    <!-- turtlebot model -->
    <env name="TURTLEBOT3_MODEL" value="$(arg model)"/>
    
    <!-- gazebo world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>
    
    <!-- robot 1 -->
    <param name="robot1_spawn_x" value="0.0"/>
    <param name="robot1_spawn_y" value="1.0"/>
    <include file="$(find turtlebot3_explorer)/launch/single_robot.launch">
        <arg name="robot_name" value="robot1"/>
        <arg name="model" value="$(arg model)"/>
        <arg name="x_pos" value="0.0"/>
        <arg name="y_pos" value="1.0"/>
        <arg name="z_pos" value="0.0"/>
    </include>
    
    <!-- robot 2 if needed -->
    <group if="$(eval arg('num_robots') >= 2)">
        <param name="robot2_spawn_x" value="0.0"/>
        <param name="robot2_spawn_y" value="-1.0"/>
        <include file="$(find turtlebot3_explorer)/launch/single_robot.launch">
            <arg name="robot_name" value="robot2"/>
            <arg name="model" value="$(arg model)"/>
            <arg name="x_pos" value="0.0"/>
            <arg name="y_pos" value="-1.0"/>
            <arg name="z_pos" value="0.0"/>
        </include>
    </group>
    
    <!-- global tf -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_frame" 
          args="0 0 0 0 0 0 map world"/>
    
    <!-- map merger -->
    <node name="map_merger" pkg="turtlebot3_explorer" type="map_merger.py" 
          output="screen" launch-prefix="bash -c 'sleep 3; $0 $@'">
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 1)">[robot1]</rosparam>
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 2)">[robot1, robot2]</rosparam>
    </node>
    
    <!-- frontier detector -->
    <node name="frontier_detector" pkg="turtlebot3_explorer" type="frontier_detector" 
      output="screen" launch-prefix="bash -c 'sleep 6; $0 $@'">
        <param name="min_frontier_size" value="4"/>
        <param name="update_rate" value="5.0"/>
        <param name="robot_filter_radius" value="1.0"/>
        <param name="frontier_spacing" value="1.5"/>
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 1)">[robot1]</rosparam>
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 2)">[robot1, robot2]</rosparam>
    </node>

    <!-- llm frontier selector -->
    <node name="llm_frontier_selector" pkg="turtlebot3_explorer" type="llm_frontier_selector.py" 
          output="screen" launch-prefix="bash -c 'sleep 4; $0 $@'">
    </node>
    
    <!-- a* path planner -->
    <node name="astar_planner" pkg="turtlebot3_explorer" type="astar_planner" 
          output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
        <param name="allow_unknown" value="true"/>
        <param name="robot_radius" value="0.18"/>
        <param name="safety_margin" value="0.08"/>
        <param name="use_dynamic_heuristics" value="true"/>
        <param name="heuristic_weight" value="1.1"/>
        <param name="unknown_cost_factor" value="1.1"/>
        <param name="max_unknown_cells" value="500"/>
        <param name="conservative_unknown" value="true"/>
    </node>
    
    <!-- path follower robot1 -->
    <node name="path_follower_robot1" pkg="turtlebot3_explorer" type="path_follower"
          output="screen" launch-prefix="bash -c 'sleep 4; $0 $@'">
        <param name="robot_name" value="robot1"/>
        <param name="position_tolerance" value="0.3"/>
        <param name="linear_speed" value="0.25"/>
        <param name="angular_speed" value="1.0"/>
        <param name="goal_tolerance" value="0.4"/>
        <param name="lookahead_points" value="0"/>
        <param name="critical_distance" value="0.2"/>
        <param name="slow_distance" value="0.4"/>
    </node>
    
    <group if="$(eval arg('num_robots') >= 2)">
        <!-- path follower robot2 -->
        <node name="path_follower_robot2" pkg="turtlebot3_explorer" type="path_follower"
              output="screen" launch-prefix="bash -c 'sleep 4; $0 $@'">
            <param name="robot_name" value="robot2"/>
            <param name="position_tolerance" value="0.3"/>
            <param name="linear_speed" value="0.25"/>
            <param name="angular_speed" value="1.0"/>
            <param name="goal_tolerance" value="0.4"/>
            <param name="lookahead_points" value="0"/>
            <param name="critical_distance" value="0.2"/>
            <param name="slow_distance" value="0.4"/>
        </node>
    </group>

    <!-- slam initializer -->
    <node name="slam_initializer" pkg="turtlebot3_explorer" type="slam_initializer.py" 
          output="screen" launch-prefix="bash -c 'sleep 7; $0 $@'">
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 1)">[robot1]</rosparam>
        <rosparam param="robot_names" if="$(eval arg('num_robots') == 2)">[robot1, robot2]</rosparam>
    </node>
    
    <!-- robot coordinator -->
    <node name="robot_coordinator" pkg="turtlebot3_explorer" type="robot_coordinator.py" 
      output="screen" launch-prefix="bash -c 'sleep 10; $0 $@'">
    <rosparam param="robot_names" if="$(eval arg('num_robots') == 1)">[robot1]</rosparam>
    <rosparam param="robot_names" if="$(eval arg('num_robots') == 2)">[robot1, robot2]</rosparam>
    <param name="update_rate" value="2.0"/>
    <param name="frontier_reuse_radius" value="1.0"/>
</node>
    
    <group if="$(arg use_survivors)">
        <node name="survivor_manager" pkg="turtlebot3_explorer" type="survivor_manager"
              output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
            <param name="discovery_radius" value="0.6"/>
            <rosparam param="robot_names" if="$(eval arg('num_robots') == 1)">[robot1]</rosparam>
            <rosparam param="robot_names" if="$(eval arg('num_robots') == 2)">[robot1, robot2]</rosparam>
        </node>
        
        <!-- llm rescue planner -->
        <node name="llm_rescue_planner" pkg="turtlebot3_explorer" type="llm_rescue_planner.py"
              output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
            <param name="ollama_model" value="llama3.2:3b"/>
        </node>
        
        <!-- rescue robot - waits for exploration -->
        <include file="$(find turtlebot3_explorer)/launch/rescue_robot.launch">
            <arg name="robot_name" value="rescue_robot"/>
            <arg name="model" value="waffle"/>
            <arg name="x_pos" value="0.0"/>
            <arg name="y_pos" value="0.0"/>
            <arg name="z_pos" value="0.0"/>
        </include>
        
        <!-- rescue robot controller -->
        <node name="rescue_robot_controller" pkg="turtlebot3_explorer" type="rescue_robot.py"
              output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
            <param name="robot_name" value="rescue_robot"/>
            <param name="spawn_x" value="0.0"/>
            <param name="spawn_y" value="0.0"/>
        </node>
    </group>
    
</launch>